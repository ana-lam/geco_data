#!/bin/bash

# a script for finding paths to the copies of files stored on the
# highest speed storage medium

set -o errexit
set -o nounset
set -o noclobber

# exit if no arguments
if [ "$#" == "0" ]; then
    cat <<USAGE
Usage: $0 channel_name start_time end_time where

    - channel_name       is the full channel name
    - start_time         is in the form Sep 01 00:00:00 GMT 2015
    - end_time           is in the same form as start_time

USAGE
    exit 1
fi

# requires dropbox uploader
dbu='/home/stefan.countryman/bin/dropbox_uploader'

observatory_letter="$(echo $1 | head -c 1)"
channel_name="$1"
start_time="$2"
end_time="$3"

# translate times to gps
gps_start_time=`lalapps_tconvert $start_time`
echo GPS start time: $gps_start_time
gps_end_time=`lalapps_tconvert $end_time`
echo GPS end time: $gps_end_time

# find times
dump_start_time=`dc -e "$gps_start_time 64/64*p"`
echo Dump start time: $dump_start_time
dump_end_time=`dc -e "$gps_end_time 64/64*64+p"`
echo Dump end time: $dump_end_time

# get data for each
current_time="$dump_start_time"
while [ "$current_time" -lt "$dump_end_time" ]; do
    # get a descriptive path name where this should be saved
    outdir=`printf "$channel_name" | tr ':' '_'`
    outpath="$outdir/$current_time".dat
    # echo Outpath: $outpath

    # SAVE TO DROPBOX
#    # dump the data from the gw frame file into a buffer file
#    tmppath="/tmp/geco_dump_frame_`date +%y-%m-%d_%H-%M-%S-%N`"
#    echo Tmppath: $tmppath
#    framecpp_dump_channel --channel "$channel_name" "$path" > "$tmppath"
#    # upload to dropbox
#    $dbu upload "$tmppath" "$outpath"
#    # delete the temp file
#    rm -v "$tmppath"

    # SAVE LOCALLY
    home="/home/stefan.countryman"
    if [ -e "$home/$outpath" ]; then
        echo File $home/$outpath exists, skipping...
    else
        if ! [ -e "$home/$outdir" ]; then
            mkdir -p "$home/$outdir"
        fi
        # get the file path for this time
        path=`gw_data_find -o $observatory_letter -t "$observatory_letter"1_R -s \
        $current_time -e $current_time -u file | sed 's/file:\/\/localhost//'`
        if [ "$path" == "" ]; then
            echo No frame file found for $current_time, skipping...
        else
            echo Path: $path
            echo Dumping data to $home/$outpath...
            framecpp_dump_channel --channel "$channel_name" "$path" > "$home/$outpath"
        fi
    fi
    # move on to the next time
    let 'current_time+=64'
done
