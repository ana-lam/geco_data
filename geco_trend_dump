#!/bin/bash

# Stefan Countryman, 5/24/16
# Download minute trends for a given channel

set -o errexit
set -o nounset
set -o noclobber # can be overridden with -f flag
# print everything before executing; good for debugging, off by default
# set -o xtrace

#------------------------------------------------------------------------------
# HELP MESSAGE
#------------------------------------------------------------------------------
usage() {
#     echo usage disabled
# }
# unsage() {
    cat <<USAGE
Download minute trends for a given channel and dump them into tabular text
files, where the first three lines are a header with the following information:

    - First line contains the channel name
    - Second line contains the trend extension (e.g. max, min, mean)
    - Third line contains column labels

And the remaining lines are data, formatted as follows:

    - First column is the time column
    - Second column is the channel value column

USAGE: geco_trend_dump [ -p output_directory ] -s start_time -e end_time -t trend_extensions -c channel_name

ARGUMENTS:

    All arguments are interpreted as channel names. This makes it easy to use
    a pipe and xargs to choose channel names. Other options must be set
    using option flags.

    In addition to specifying the start and end times via the -s and -e flags,
    the user can provide a tabular list of start/stop times via STDIN, where
    the first column contains start times and the second column contains
    end times for each time interval. The time intervals provided will be
    handled sequentially as they are fed into stdin.

OPTIONS:

    -s start_time         is in the form Sep 01 00:00:00 GMT 2015 (or any
                          format recognizable by lalapps_tconvert), or is a
                          gps time like 1125100817. Either this
                          or a sequence of line-delimited start/end time pairs
                          in the same format is REQUIRED.

    -e end_time           is in the same form as start_time. Either this or a
			  sequence of line-delimited start/end time pairs is
                          REQUIRED.

    -c channel_name       a channel name, without trend extension or trend
                          type included, e.g.
                          H1:SYS-TIMING_C_MA_A_PORT_2_SLAVE_CFC_TIMEDIFF_1

    -t trend_extensions   what type of statistics should be downloaded.
                          Accepts a trend extension
                          from the following set of options:

                              mean  -- mean value of the trend
                              min   -- minimum value of the trend
                              max   -- maximum value of the trend
                              n     -- number of data points per trend value
                              rms   -- root mean square value of the trend

                          (Note that standard deviation can be computed from
                          rms and mean values.) This option is REQUIRED.

    -p output_directory   defaults to ~/. Timeseries text files will be saved
                          to output_directory/geco_trend_dump.d/channel_name.

    -f                    force dump. Will overwrite the output of previous
                          invocations of geco_trend_dump and will overwrite
                          existing files without complaint.

    -T                    write dumped data to STDOUT instead of saving it to
                          a file. Data is formatted the same way, and if
                          multiple time segments are used for the dump, the
                          output will contain multiple headers. This has the
                          same effect as dumping the data to multiple files
                          and then using e.g. \`cat\` to concatenate their
                          content and print it to STDOUT.

    -h                    shows this message.

EXAMPLES:

    Dump max, mean, and min trends from the first day of 2016 of the time
    difference between the aLIGO timing distribution system and the Hanford
    Main Storage Room Cs-III cesium clock 1PPS signals into separate
    subdirectories of ~/timediffs/geco_trend_dump.d:

        geco_trend_dump \\
                -s 'Jan 1 2016 GMT' \\
                -e 'Jan 2 2016 GMT' \\
                -t max,mean,min \\
                -p ~/timediffs \\
                -c H1:SYS-TIMING_C_MA_A_PORT_2_SLAVE_CFC_TIMEDIFF_1

    Get the same data for all operational segments at Hanford between Aug 1,
    2015 and May 1, 2016, and save it to the default directory,
    ~/geco_trend_dump.d:

        geco_get_operational_segments \\
                -s 'Aug 1 2015' \\
                -e 'May 1 2016' \\
                -o H \\
            | geco_trend_dump \\
                -t mean \\
                -c H1:SYS-TIMING_C_MA_A_PORT_2_SLAVE_CFC_TIMEDIFF_1

USAGE
}

#------------------------------------------------------------------------------
# CONSTANTS
#------------------------------------------------------------------------------

# DEFINE CONSTANTS
MAX_TIME_INTERVAL=21600       # 21600 seconds is 6 hours
SECONDS_PER_VAL=60            # Each value represents 60 seconds of data
CHAN_TYPE='m-trend'           # Only use minute trends for now
VALID_TREND_EXTENSIONS="mean min max n rms"
NDS_SERVER='nds.ligo.caltech.edu'
LOGFILE=/dev/stderr           # by default, just log to STDERR

#------------------------------------------------------------------------------
# HELPER FUNCTIONS
#------------------------------------------------------------------------------

# DEFINE HELPER FUNCTIONS

log () {
    printf '%s\n' "$(date +'%D %H:%M:%S:') $*" >> "$LOGFILE"
}

# get the path to the output directory based on channel name and path prefix
get_outfile () {
    local gps_start_time="${1}"
    local gps_end_time="${2}"
    local channel_name="${3}"
    local trend_extensions="${4}"
    local outdir_pre="${5}"
    # if -T flag specified, just print to STDOUT
    if "${print_timeseries_to_stdout}"; then
        local outfile="/dev/stdout"
    else
        # default output directory is ~/geco_trend_dump.d/channel_name;
        # else is $outdir_pre/geco_trend_dump.d/channel_name
        if [ "$outdir_pre" == "" ]; then
            outdir="$HOME/geco_trend_dump.d/$(
                printf "%s" "${channel_name}" | tr ':' '_'
            )"
        else
            outdir="${outdir_pre}/geco_trend_dump.d/$(
                printf "%s" "${channel_name}" | tr ':' '_'
            )"
        fi
        # make sure output directory exists
        mkdir -p "${outdir}"
        # find the outfile
        local outfile="${outdir}/${gps_start_time}_to_${gps_end_time}.${trend_extension}.${CHAN_TYPE}.dat"
    fi
    echo -n "${outfile}"
}

# perform the nds_query and print output
run_nds_query () {
    local gps_start_time="${1}"
    local delta_t="${2}"
    local channel_name="${3}"
    local trend_extension="${4}"
    log "running nds_query: $*"
    timeout 120 nds_query \
            -n "${NDS_SERVER}" \
            -s "${gps_start_time}" \
            -d "${delta_t}" \
            -v "${channel_name}.${trend_extension},${CHAN_TYPE}" \
        && log "nds_query finished." \
        || ( [ $? -eq 124 ] && log "nds_query timed out." )
}

# reformat the output of an nds_query into a tabular format with time in the
# first column and trend value in the second
tabularize_nds_query_result () {
    # local n_values
    local gps_start_time
    read -r l
    gps_start_time=$(sed 's/.*GPS: \([0-9]*\).*$/\1/' <<<"$l")
    read -r
    read -r
    read -r l
    # this next line is currently unused; might remove
    # n_values=$(sed 's/.*nWords: \([0-9]*\).*$/\1/' <<<"$l")
    sed 's/ *[0-9]* *//;s/  */'$'\\\n/g' \
        | awk '{printf "%d\t%s\n", (NR-1)*'"${SECONDS_PER_VAL}+${gps_start_time}"', $0}'
}

# dump the trend timeseries to disk. this is where the work gets done.
dump_trend () {
    local gps_start_time="${1}"
    local gps_end_time="${2}"
    local channel_name="${3}"
    local trend_extension="${4}"
    local outdir_pre="${5}"
    local delta_t=$((gps_end_time - gps_start_time))
    local outfile
    outfile="$(get_outfile "${gps_start_time}" "${gps_end_time}" \
                    "${channel_name}" "${trend_extension}" "${outdir_pre}")"
    # delete the outfile (will fail if file exists and -f not specified)
    if ! "${print_timeseries_to_stdout}" && [ -e "${outfile}" ]; then
        if "${force}"; then
            rm -f "${outfile}"
        else
            echo "Error: must specify -f flag to overwrite existing files" >&2
            usage
            exit 1
        fi
    fi
    # next three lines add a descriptive header to the file
    echo "${channel_name}" >> "${outfile}"
    echo "${trend_extension}" >> "${outfile}"
    printf 'GPS-TIME\tTREND-VALUE\n' >> "${outfile}"
    # this dumps the tabularized data
    run_nds_query "${gps_start_time}" "${delta_t}" \
            "${channel_name}" "${trend_extension}" \
        | tabularize_nds_query_result >> "${outfile}"
}

# concatenate start/stop times specified using flags to the list of start/stop
# times provided via stdin
# see if we are getting stdin from a pipe
[ -p /dev/fd/0 ] && stdin_from_pipe=true || stdin_from_pipe=false
concatenate_time_segments () {
    local gps_start_time="${1}"
    local gps_end_time="${2}"
    # check if start and end time are nonempty; if so, include them
    if [ -z ${gps_start_time:+x} ] && [ -z ${gps_end_time:+x} ]; then
        first_time_segment=""
    elif [ -z ${gps_start_time:+x} ] || [ -z ${gps_end_time:+x} ]; then
        echo "Must provide both start and stop times, or neither" >&2
        usage
        exit 1
    else
        first_time_segment="${gps_start_time} ${gps_end_time}"$'\n'
    fi
    printf "%s" "${first_time_segment}"
    "${stdin_from_pipe}" && cat -
}

# make sure the time segments provided are valid
validate_time_segments () {
    # must have at least one line
    local lines=0
    while read -r gps_start_time gps_end_time rest_of_line; do
        lines=$((lines + 1))
        # start must be before end
        if [ ${gps_end_time} -le ${gps_start_time} ]; then
            echo "Error: End time must be strictly greater than start." >&2
            echo "    line number: ${lines}" >&2
            echo "    line: ${gps_start_time} ${gps_end_time} ${rest_of_line}" >&2
            usage
            exit 1
        fi
        # there should only be two words
        if ! [ -z "${rest_of_line}" ]; then
            echo "Error: each time segment provided by pipe to STDIN must" >&2
            echo "    be of the format '<start> <stop>' where both values" >&2
            echo "    are integers representing GPS times." >&2
        fi
        echo "${gps_start_time} ${gps_end_time}"
    done
    # make sure we had at least one line
    if [ $lines -eq 0 ]; then
        echo "Error: must provide at least one pair of start/stop times," >&2
        echo "    either using -s and -e flags or by piping to STDIN." >&2
        usage
        exit 1
    fi
}

# round the start/stop times to the nearest integer multiples of 60 (round
# start down and end up to be inclusive)
round_time_segments () {
    awk '
        function ceil(x){
            return (x == int(x)) ? x : int(x)+1
        }
        {
            print int($1/60)*60 " " ceil($2/60)*60
        }
    '
}

# split each segment into sub-segments of max-length 6 hours so that queries
# aren't too long for nds to handle
split_time_segments () {
    while read -r gps_start_time gps_end_time rest_of_line; do
        next_epoch=$((gps_start_time / ${MAX_TIME_INTERVAL}
                      * ${MAX_TIME_INTERVAL} + ${MAX_TIME_INTERVAL}))
        split_segment="${gps_start_time} "
        while [ ${next_epoch} -lt ${gps_end_time} ]; do
            split_segment="${split_segment}${next_epoch}"$'\n'"${next_epoch} "
            next_epoch=$((next_epoch + ${MAX_TIME_INTERVAL}))
        done
        split_segment="${split_segment}${gps_end_time}"
        echo "${split_segment}"
    done
}

# if multiple trend_extensions are specified, recursively fork for each one.
# must pipe list of start/stop times to this process.
fork_process_for_each_trend_extension () {
    local channel_name="${1}"
    local trend_extensions="${2}"
    local outdir_pre="${3}"
    # check: are we using -f flag to force overwrites?
    local _f
    _f="$("${force}" && echo '-f' || true)"
    # make a folder for the named PIPES
    tmp_dir="$(mktemp -d)"
    # add comma to the front of the list to make name substitutions easier
    comma_trend_extensions=,"${trend_extensions}"
    for te in ${trend_extensions//,/ }; do
        mkfifo "${tmp_dir}/${te}"
        geco_trend_dump \
                -t "${te}" \
                -c "${channel_name}" \
                -p "${outdir_pre}" \
                ${_f} <"${tmp_dir}/${te}" & p=$!
        declare "pid_${te}=${p}"
    done
    # write STDIN to each named PIPE
    tee ${comma_trend_extensions//,/ ${tmp_dir}/} >/dev/null
    # delete PIPES     
    rm -rf "${tmp_dir}"
    # wait for subprocesses to complete
    pids=$(
        for pid in ${comma_trend_extensions//,/ pid_}; do
            # echo pid is: "${pid}" >&2
            printf "%s" "${!pid} "
        done
    )
    wait ${pids}
}

# read time segments from stdin and dump data for each
dump_time_segments () {
    local channel_name="${1}"
    local trend_extensions="${2}"
    local outdir_pre="${3}"
    msg='Starting new dump:'
    msg+=$'\n'"    CHANNEL_NAME: ${channel_name}"
    msg+=$'\n'"    TREND_EXTENSIONS: ${trend_extensions}"
    msg+=$'\n'"    OUTDIR_PRE: ${outdir_pre}"
    log "${msg}"
    if [[ "${trend_extensions}" == *,* ]]; then
        log 'Forking a process for each trend extension.'
        fork_process_for_each_trend_extension \
            "${channel_name}" "${trend_extensions}" "${outdir_pre}"
    else
        # read start/stop times and download data for each time segment
        while read -r gps_start_time gps_end_time rest_of_line; do
            if ! [ -z "${rest_of_line}" ]; then
                printf "Error: time segments must consist only of start/stop "
                printf "times separated by whitespace\n"
                printf "and appearing on new lines.\n"
                log "Error: Bad time segment:"
                log "${gps_start_time} ${gps_end_time} ${rest_of_line}"
                exit 1
            fi
            dump_trend "${gps_start_time}" "${gps_end_time}" \
                "${channel_name}" "${trend_extensions}" "${outdir_pre}"
        done
        log "Finished dumping ${channel_name}.${trend_extensions},${CHAN_TYPE}"
    fi
}

#------------------------------------------------------------------------------
# GET OPTION FLAGS
#------------------------------------------------------------------------------
# DEFINE OPTION VARIABLES HERE
outdir_pre="$HOME"
start_time=""
end_time=""
channel_name=""
trend_extensions=""
force=false
print_timeseries_to_stdout=false
# DEFINE OPTION FLAGS BELOW
while getopts ":s:e:t:p:c:fTh" opt; do
    case ${opt} in
# HANDLE OPTION FLAGS HERE
        s)  start_time="${OPTARG}";;
        e)  end_time="${OPTARG}";;
        c)  channel_name="${OPTARG}";;
        t)  trend_extensions="${OPTARG}";;
        p)  outdir_pre="${OPTARG}";;
        f)  set +o noclobber && force=true;;
        T)  print_timeseries_to_stdout=true;;
        h)  usage; exit;;
        :)
            echo "Option -${OPTARG} requires an argument." >&2
            usage
            exit 1
            ;;
        \?)
            echo "Invalid option: -${OPTARG}" >&2
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))
# CONFIRM VALIDITY OF INPUT
# write to a log file in our output directory rather than STDERR
mkdir -p "${outdir_pre}"
LOGFILE="${outdir_pre}"/geco_trend_dump.log
# channel_name and trend_extensions are required
if [ -z ${channel_name:+x} ]; then
    echo "Error: Must provide -c channel_name" >&2
    usage
    exit 1
elif [ -z ${trend_extensions:+x} ]; then
    echo "Error: Must provide -t trend_extensions." >&2
    usage
    exit 1
fi
# make sure the trend extensions provided are valid
if ! [[ ,"${trend_extensions}" == *(,${VALID_TREND_EXTENSIONS// /|,}) ]]; then
    printf "Error: trend_extensions must be picked from: " >&2
    printf "%s" "$VALID_TREND_EXTENSIONS"'\n' >&2
    usage
    exit 1
fi
# cannot have multiple trend_extensions with -T flag specified
if [[ "${trend_extensions}" == *,* ]] && "${print_timeseries_to_stdout}"; then
    echo "Error: can only specify one trend_extension when using -T flag." >&2
    usage
    exit 1
fi
# get the gps times, in case the input was human-readable; if start/stop times
# not provided with flags, they must be provided via STDIN
if ! [ -z ${start_time:+x} ] && ! [ -z ${end_time:+x} ]; then
    gps_start_time=$(lalapps_tconvert -t ${start_time})
    gps_end_time=$(lalapps_tconvert -t ${end_time})
elif ! "${stdin_from_pipe}"; then
    echo "Error: must provide start/stop time either using -s and -e" >&2
    echo "    flags, or by piping a line-delimited list of start/stop" >&2
    echo "    times to STDIN." >&2
    usage
    exit 1
else
    gps_start_time=""
    gps_end_time=""
fi

#------------------------------------------------------------------------------
# MAIN BODY
#------------------------------------------------------------------------------

# see if we have multiple trend extensions; if so, fork multiple processes
concatenate_time_segments "${gps_start_time}" "${gps_end_time}" \
    | validate_time_segments \
    | round_time_segments \
    | split_time_segments \
    | dump_time_segments "${channel_name}" "${trend_extensions}" "${outdir_pre}"
