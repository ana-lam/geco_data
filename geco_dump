#!/bin/bash

# a script for dumping to text a timeseries for a given channel
# over a given time range from the highest speed storage medium
# Stefan Countryman 4/2/2016

set -o errexit
set -o nounset
set -o noclobber
# print everything before executing
# set -o xtrace

usage() {
    cat <<USAGE
USAGE: geco_dump -s start_time -e end_time [ -l channel_list | -c channel_name [ ... ] ] [ OPTIONS ]

OPTIONS:

    -s start_time         is in the form Sep 01 00:00:00 GMT 2015. REQUIRED.

    -e end_time           is in the same form as start_time. REQUIRED.

    -c channel_name       is the full channel name. Can be used multiple times
                          to specify multiple channels. This or -l is REQUIRED.

    -l channel_list       is a keyword specifying one of the following preset
                          lists of channels:

                          slow   -- slow channels

    -p output_directory   defaults to ~/. Timeseries text files will be saved
                          to output_directory/channel_name.

    -P                    do not start a new dump, but check the progress of
                          an ongoing dump with the given parameters.

    -h                    shows this message.

USAGE
}

# lists of timediff channels from channels.py file:
# slow_channels=`cat dev/data/channels.py | sed -n '2,13p' | sed -ne 's/.*'"'"'\(.*\)'"'"'$/\1/p'`
slow_channels=(
    "H1:SYS-TIMING_C_MA_A_PORT_2_SLAVE_CFC_TIMEDIFF_1"
    "H1:SYS-TIMING_X_FO_A_PORT_9_SLAVE_CFC_TIMEDIFF_1"
    "H1:SYS-TIMING_Y_FO_A_PORT_9_SLAVE_CFC_TIMEDIFF_1"
    "H1:SYS-TIMING_C_MA_A_PORT_2_SLAVE_CFC_TIMEDIFF_2"
    "H1:SYS-TIMING_X_FO_A_PORT_9_SLAVE_CFC_TIMEDIFF_3"
    "H1:SYS-TIMING_Y_FO_A_PORT_9_SLAVE_CFC_TIMEDIFF_3"
    "L1:SYS-TIMING_C_MA_A_PORT_2_SLAVE_CFC_TIMEDIFF_1"
    "L1:SYS-TIMING_X_FO_A_PORT_9_SLAVE_CFC_TIMEDIFF_1"
    "L1:SYS-TIMING_Y_FO_A_PORT_9_SLAVE_CFC_TIMEDIFF_1"
    "L1:SYS-TIMING_C_MA_A_PORT_2_SLAVE_CFC_TIMEDIFF_2"
    "L1:SYS-TIMING_X_FO_A_PORT_9_SLAVE_CFC_TIMEDIFF_3"
    "L1:SYS-TIMING_Y_FO_A_PORT_9_SLAVE_CFC_TIMEDIFF_3")

# get options
outdir_pre=""
start_time=""
end_time=""
check_dump_progress=false
unset channel_names
while getopts ":p:s:e:c:l:Ph" opt; do
    case $opt in
        p)  outdir_pre="$OPTARG";;
        s)  start_time="$OPTARG";;
        e)  end_time="$OPTARG";;
        c)  channel_names+=("$OPTARG");;
        l)
            case "$OPTARG" in
                slow) channel_names+=${slow_channels[*]};;
            esac
            ;;
        P)  check_dump_progress=true;;
        h)  usage && exit;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

# there should be no non-flag arguments
if ! [ "$#" == 0 ]; then
    echo "Expected only flag arguments; got $# non-flag arguments." >&2
    usage
    exit 1
elif [ "$start_time" == "" ]; then
    echo "Error: Must provide start time with -s flag." >&2
    usage
    exit 1
elif [ "$end_time" == "" ]; then
    echo "Error: Must provide end time with -e flag." >&2
    usage
    exit 1
elif ! [ "$channel_names" ]; then
    echo "Error: Must provide at least one channel name with -c flag." >&2
    usage
    exit 1
fi

if $check_dump_progress; then
    # find number of frame files from which to dump
    gps_start_time=`lalapps_tconvert $start_time`
    gps_end_time=`lalapps_tconvert $end_time`
    num_frame_files=`dc -e "$gps_end_time 64/$gps_start_time 64/-1+p"`
    
    while true; do
        echo Start time: `lalapps_tconvert -d $start_time`
        echo End time: `lalapps_tconvert -d $end_time`
        echo GPS start time: $gps_start_time
        echo GPS end time: $gps_end_time
        echo Files to process: $num_frame_files
        echo NOTE: If data cannot be found, files will be skipped, causing
        echo progress to seemingly hang at around 100%.
        printf 'CURRENT TIME: '
        date
        printf 'SIZE MODIFIED         CHANNEL\n'
        for channel_name in ${channel_names[*]}; do
            f="$(printf "${channel_name}" | tr ':' '_')"
            usg=$(du -h --time --max-depth=0 "$f")
            cnt=$(ls "$f" | wc -l)
            pct=$(dc -e "$cnt 100*$num_frame_files/p")
            echo $usg $cnt/$num_frame_files \($pct\%\)
        done
        # sleep for 5 minutes before recomputing
        sleep 300
    done
else
    # fork a process for each channel dump and print output to a log file
    for channel_name in ${channel_names[*]}; do
        echo Forking for ${channel_name}
        logfile="$(printf "${channel_name}" | tr ':' '_').log"
        geco_dump_channel -s "${start_time}" -e "${end_time}" \
                          -c "${channel_name}" -p "${outdir_pre}" \
            >> "${logfile}" &
    done
fi
