#!/usr/bin/env bash
# (c) Stefan Countryman (2018)
# Watch progress of gstlal download jobs

set -o errexit
set -o pipefail

cry(){ echo "$@" >&2; }

die(){ cry "$@" && usage && exit 1; }

usage(){
    cry "USAGE: $0 [-p] [-f] [-s] [-n REFRESH] [-h]"
    cry
    cry "Watch progress of GSTLAL downloads every 30 seconds. This will fail"
    cry "if you have spaces in any of the script or output directory path"
    cry "names. Sorry."
    cry
    cry "-h shows this help message."
    cry "-p shows job progress"
    cry "-f shows file info/disk usage"
    cry "-s shows slurm queue for current user"
    cry "-n override default of 30 second time delay between refreshes"
}

add_cmd(){ cmd+="$1; "; }

all_scripts(){
    local scripts_fmt="for p in $(printf " '%s'" "${scripts[@]}"); do %s; done"
    add_cmd "${scripts_fmt//%s/$1}"
}

# USAGE: map CMD ITEM1 [ITEM2 ...]
# the loop variable is called `arg`, so use "$arg" in CMD as a placeholder.
map(){
    newcmd="$1"
    shift
    local fmt="for arg in $(printf " '%s'" "$@"); do %s; done"
    add_cmd "${fmt//%s/${newcmd}}"
}

SCRIPTS=(~/dev/geco_data/slurm-jobs/gstlal-subthreshold-frame-download-ldas-pcdev*.sh)
OUTDIRS=(/rigel/geco/users/shared/frames/gstlal_offline_subthreshold/gstlal-subthreshold-raw-*)
time=30
while getopts "hpfsn:" opt; do
    case ${opt} in
        p)  map '$arg -p' "${SCRIPTS[@]}";;
        f)  map 'echo "DIR: $arg"; ls -lath $arg | head; echo' "${OUTDIRS[@]}";;
        s)  cmd+="squeue -u $(whoami); ";;
        n)  time="${OPTARG}";;
        \?) die;;
    esac
done
if ! [[ -v cmd ]]; then
    usage
    exit
fi

watch -n "${time}" "${cmd}";
