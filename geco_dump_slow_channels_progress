#!/bin/bash

# monitor the progress of a geco channel dump.

set -o errexit
set -o nounset
set -o noclobber

# exit if no arguments
if [ "$#" == "0" ]; then
    cat <<USAGE
Generate recurring status message showing the progress of ongoing
geco_data_dump processes, assuming that all TIMING output folders are being
written to by active processes.
Usage: $0 start_time end_time

where

    start_time         is in the form Sep 01 00:00:00 GMT 2015
    end_time           is in the same form as start_time

NOTE: this only works if the output directories of the dump are in the
current directory.
USAGE
    exit 1
fi

start_time="$1"
end_time="$2"

echo Start time: `lalapps_tconvert -d $start_time`
echo End time: `lalapps_tconvert -d $end_time`

# find number of frame files from which to dump
gps_start_time=`lalapps_tconvert $start_time`
echo GPS start time: $gps_start_time
gps_end_time=`lalapps_tconvert $end_time`
echo GPS end time: $gps_end_time
num_frame_files=`dc -e "$gps_end_time 64/$gps_start_time 64/-1+p"`
echo Files to process: $num_frame_files

echo NOTE: If data cannot be found, files will be skipped, causing
echo progress to seemingly hang at around 100%.

while true; do
    printf 'CURRENT TIME: '
    date
    # look for folders with the word TIMING in them
    for f in `ls -1 -d *TIMING* | sed '/log/d'`; do
        usg=$(du -h --time --max-depth=0 "$f")
        cnt=$(ls "$f" | wc -l)
        pct=$(dc -e "$cnt 100*$num_frame_files/p")
        echo $usg count: $cnt/$num_frame_files \($pct\%\)
    done
    # sleep for 5 minutes before recomputing
    sleep 300
done
